#+TITLE: Lab 1: Information State Update (ISU)

* Preparations
- Create a fork of [[https://github.com/GU-CLASP/sisu][SISU]] and clone it to your working machine.
- Follow the prerequisites in SISU's README. After this, if everything works as expected, your development environment should be ready for doing lab.

SISU contains a partial implementation of IBiS1, and a simple domain. To understand what the system can do, see the automated tests in ~test/dme.test.js~.

* Task 1: Make system answer depend on day
Extend the implementation so that after the user has answered the "Which course?" question, the system asks "Which day?". If the user answers "Monday", the system answers that the lecture is in G212; if the user answers "Thursday", the system answers that the lecture is in J440.

This task involves modifying/extending the domain (in ~src/is.ts~) as well as NLU and NLG (in ~src/nlug.ts~).

* Task 2a: Negative semantic understanding feedback
Extend the implementation so that when the user utters something that is not understood by the NLU, the system utters "Sorry, I don't understand."

This task involves modifying/extending domain-independent parts of the implementation, e.g. update rules (in ~src/rules.ts~). Specifically, you will need to come up with a new kind of move that conveys negative semantic understanding, and ensure that such a move gets added to next_moves when the NLU fails to parse the user's utterance. You will also need to ensure that the new kind of move can ge generated by the NLG.

Note that when the NLU does not understand an utterance, it returns an empty array. To check whether some variable ~x~ is an empty array, you can do ~if(Array.isArray(x) && x.length === 0) { ... }~.

Feel free to let your solution be informed by Larsson (2002, section 3.6.5 and rule 3.12). But you can also design your own solution.

* Task 2b: Feedback followed by repeated question
Ensure that when the system gives negative semantic understanding feedback, and previously asked a question from the plan, it asks the question again, e.g. like this:

- S: Hello! You can ask me anything!
- U: bla bla
- S: Sorry, I didn't understand.
- U: Where is the lecture?
- S: Which course?
- U: bla bla
- S: Sorry, I didn't understand. Which course?

Depending on how you solved 2a, this might already work.

* Troubleshooting using logs
Logs can be very useful when troubleshooting the implementation. If you test live in the browser, you can look at the console in the web developer tools. In automated testing (~yarn test~), log entries are printed to the terminal; you can also pipe them to a file with ~yarn test 2>&1 > test.log~. Feel free to add your own log entries in your code, with ~console.log(...)~.

* Submission
Report the lab by submitting a link to a pull request containing your solutions, including automated tests (in ~test/dme.test.ts~).
